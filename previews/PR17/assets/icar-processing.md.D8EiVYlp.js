import{_ as r,C as p,c as h,o as d,j as a,a as e,aA as n,G as t,w as l}from"./chunks/framework.BSFqMKy6.js";const S=JSON.parse('{"title":"Processing Functions","description":"","frontmatter":{},"headers":[],"relativePath":"icar-processing.md","filePath":"icar-processing.md","lastUpdated":null}'),k={name:"icar-processing.md"},o={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},c={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""};function b(T,s,C,f,A,j){const i=p("Badge");return d(),h("div",null,[s[40]||(s[40]=a("h1",{id:"Processing-Functions",tabindex:"-1"},[e("Processing Functions "),a("a",{class:"header-anchor",href:"#Processing-Functions","aria-label":'Permalink to "Processing Functions {#Processing-Functions}"'},"â€‹")],-1)),a("details",o,[a("summary",null,[s[0]||(s[0]=a("a",{id:"FMDData.add_all_metadata!-Union{Tuple{Pair{T, D}}, Tuple{D}, Tuple{T}} where {T<:DataFrames.DataFrame, D<:OrderedCollections.OrderedDict{<:Symbol}}",href:"#FMDData.add_all_metadata!-Union{Tuple{Pair{T, D}}, Tuple{D}, Tuple{T}} where {T<:DataFrames.DataFrame, D<:OrderedCollections.OrderedDict{<:Symbol}}"},[a("span",{class:"jlbinding"},"FMDData.add_all_metadata!")],-1)),s[1]||(s[1]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[3]||(s[3]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_all_metadata!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, D}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, D </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> OrderedDict{&lt;:Symbol, &lt;:Any}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds multiple metadata columns to a DataFrame based on a dictionary of metadata.</p><p><strong>Arguments</strong></p><ul><li><code>df_pair</code>: A <code>Pair</code> where the key is the DataFrame to modify and the value is an <code>OrderedDict</code> of metadata. The keys of the dictionary should be the names of the metadata columns to add, and the values should be the values to populate those columns with.</li></ul>`,4)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L18-L27",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),a("details",g,[a("summary",null,[s[4]||(s[4]=a("a",{id:"FMDData.add_metadata_col!-Tuple{Any, Vararg{Any}}",href:"#FMDData.add_metadata_col!-Tuple{Any, Vararg{Any}}"},[a("span",{class:"jlbinding"},"FMDData.add_metadata_col!")],-1)),s[5]||(s[5]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_metadata_col!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(metadata_column, df_metadata_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Adds a metadata column to one or more DataFrames. This is a generic function that can be used to add any metadata column.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[6]||(s[6]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L138-L142",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),a("details",c,[a("summary",null,[s[8]||(s[8]=a("a",{id:'FMDData.add_metadata_col!-Union{Tuple{I}, Tuple{T}, Tuple{Symbol, Pair{T, I}}} where {T<:DataFrames.AbstractDataFrame, I<:Union{var"#s110", var"#s109", var"#s108"} where {var"#s110"<:Integer, var"#s109"<:AbstractFloat, var"#s108"<:AbstractString}}',href:'#FMDData.add_metadata_col!-Union{Tuple{I}, Tuple{T}, Tuple{Symbol, Pair{T, I}}} where {T<:DataFrames.AbstractDataFrame, I<:Union{var"#s110", var"#s109", var"#s108"} where {var"#s110"<:Integer, var"#s109"<:AbstractFloat, var"#s108"<:AbstractString}}'},[a("span",{class:"jlbinding"},"FMDData.add_metadata_col!")],-1)),s[9]||(s[9]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_metadata_col!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    metadata_column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_metadata_pair</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, I </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{&lt;:Integer, &lt;:AbstractFloat, &lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds a metadata column to a single DataFrame.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[10]||(s[10]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L157-L164",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),a("details",E,[a("summary",null,[s[12]||(s[12]=a("a",{id:"FMDData.add_report_year!-Union{Tuple{Vararg{Pair{T, I}}}, Tuple{I}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, I<:Integer}",href:"#FMDData.add_report_year!-Union{Tuple{Vararg{Pair{T, I}}}, Tuple{I}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, I<:Integer}"},[a("span",{class:"jlbinding"},"FMDData.add_report_year!")],-1)),s[13]||(s[13]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_report_year!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_year_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, I}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    year_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :report_year</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, I </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds a report year column to one or more DataFrames.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L107-L114",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),a("details",u,[a("summary",null,[s[16]||(s[16]=a("a",{id:"FMDData.add_round_name!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}",href:"#FMDData.add_round_name!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}"},[a("span",{class:"jlbinding"},"FMDData.add_round_name!")],-1)),s[17]||(s[17]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_round_name!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_round_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, S}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    round_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :round</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds a round name column to one or more DataFrames.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L91-L98",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),a("details",y,[a("summary",null,[s[20]||(s[20]=a("a",{id:"FMDData.add_sample_year!-Tuple",href:"#FMDData.add_sample_year!-Tuple"},[a("span",{class:"jlbinding"},"FMDData.add_sample_year!")],-1)),s[21]||(s[21]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_sample_year!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_year_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    year_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :sample_year</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Adds a sample year column to one or more DataFrames.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[22]||(s[22]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L123-L130",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),a("details",F,[a("summary",null,[s[24]||(s[24]=a("a",{id:"FMDData.add_test_threshold!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}",href:"#FMDData.add_test_threshold!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}"},[a("span",{class:"jlbinding"},"FMDData.add_test_threshold!")],-1)),s[25]||(s[25]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_test_threshold!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_round_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, S}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    threshold_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :test_threshold</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds a test threshold column to one or more DataFrames.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[26]||(s[26]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L59-L66",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),a("details",_,[a("summary",null,[s[28]||(s[28]=a("a",{id:"FMDData.add_test_type!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}",href:"#FMDData.add_test_type!-Union{Tuple{Vararg{Pair{T, S}}}, Tuple{S}, Tuple{T}} where {T<:DataFrames.AbstractDataFrame, S<:AbstractString}"},[a("span",{class:"jlbinding"},"FMDData.add_test_type!")],-1)),s[29]||(s[29]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add_test_type!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df_round_pairs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Pair{T, S}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    test_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :test_type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Adds a test type column to one or more DataFrames.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[30]||(s[30]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L75-L82",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),a("details",m,[a("summary",null,[s[32]||(s[32]=a("a",{id:"FMDData.combine_round_dfs-Tuple{Vararg{DataFrames.DataFrame}}",href:"#FMDData.combine_round_dfs-Tuple{Vararg{DataFrames.DataFrame}}"},[a("span",{class:"jlbinding"},"FMDData.combine_round_dfs")],-1)),s[33]||(s[33]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">combine_round_dfs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dfs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Combines multiple DataFrames into a single DataFrame.</p>',2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[34]||(s[34]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L371-L375",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),a("details",D,[a("summary",null,[s[36]||(s[36]=a("a",{id:"FMDData.infer_later_year_values-Union{Tuple{T}, Tuple{T, T}} where T<:DataFrames.AbstractDataFrame",href:"#FMDData.infer_later_year_values-Union{Tuple{T}, Tuple{T, T}} where T<:DataFrames.AbstractDataFrame"},[a("span",{class:"jlbinding"},"FMDData.infer_later_year_values")],-1)),s[37]||(s[37]=e()),t(i,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">infer_later_year_values</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    cumulative_later_df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    initial_df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    year_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :sample_year</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statename_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :states_ut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowed_serotypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vcat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, default_allowed_serotypes),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    atol </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    digits </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractDataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Infers the values for a later year by subtracting the values from an initial year from a cumulative dataset. This is useful when a report provides cumulative data, and you need to extract the data for a single year.</p>`,2)),t(i,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[38]||(s[38]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/054d56d2a6424f33cc4b8e259fd9402b14ce3d77/src/icar-processing/icar-processing-functions.jl#L175-L189",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})])])}const M=r(k,[["render",b]]);export{S as __pageData,M as default};
