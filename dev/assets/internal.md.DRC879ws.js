import{_ as r,C as o,c as p,o as h,j as a,a as i,aA as n,G as t,w as l}from"./chunks/framework.CsI6At7Y.js";const P=JSON.parse('{"title":"Internal Functions","description":"","frontmatter":{},"headers":[],"relativePath":"internal.md","filePath":"internal.md","lastUpdated":null}'),d={name:"internal.md"},c={class:"jldocstring custom-block",open:""},k={class:"jldocstring custom-block",open:""},u={class:"jldocstring custom-block",open:""},g={class:"jldocstring custom-block",open:""},_={class:"jldocstring custom-block",open:""},y={class:"jldocstring custom-block",open:""},E={class:"jldocstring custom-block",open:""},b={class:"jldocstring custom-block",open:""},m={class:"jldocstring custom-block",open:""},F={class:"jldocstring custom-block",open:""},f={class:"jldocstring custom-block",open:""},T={class:"jldocstring custom-block",open:""},D={class:"jldocstring custom-block",open:""},C={class:"jldocstring custom-block",open:""},v={class:"jldocstring custom-block",open:""},A={class:"jldocstring custom-block",open:""},j={class:"jldocstring custom-block",open:""};function M(S,s,w,x,I,V){const e=o("Badge");return h(),p("div",null,[s[68]||(s[68]=a("h1",{id:"Internal-Functions",tabindex:"-1"},[i("Internal Functions "),a("a",{class:"header-anchor",href:"#Internal-Functions","aria-label":'Permalink to "Internal Functions {#Internal-Functions}"'},"â€‹")],-1)),a("details",c,[a("summary",null,[s[0]||(s[0]=a("a",{id:"FMDData.states_dict",href:"#FMDData.states_dict"},[a("span",{class:"jlbinding"},"FMDData.states_dict")],-1)),s[1]||(s[1]=i()),t(e,{type:"info",class:"jlObjectType jlConstant",text:"Constant"})]),s[3]||(s[3]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states_dict</span></span></code></pre></div><p>A Dictionary of States/UTs that can appear in the data set. The keys will be returned in the cleaning steps, and the values can be matched in the underlying datasets.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[2]||(s[2]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/state-keys.jl#L3-L6",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[2]})]),a("details",k,[a("summary",null,[s[4]||(s[4]=a("a",{id:"FMDData._calculate_state_counts-Tuple{Any, Any}",href:"#FMDData._calculate_state_counts-Tuple{Any, Any}"},[a("span",{class:"jlbinding"},"FMDData._calculate_state_counts")],-1)),s[5]||(s[5]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[7]||(s[7]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_calculate_state_counts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, original_df)</span></span></code></pre></div><p>An internal function to handle the calculation of the state/serotype counts based upon the provided state/serotype seroprevalence values and total state counts. Because DataFrames handles tables as named tuples, we can extract information about the columns being passed from the regex selection and then use substitution strings to collect a view of the correct column of total state counts.</p><p>You probably want to use the user-facing function <a href="/dev/icar-cleaning#FMDData.calculate_state_counts"><code>calculate_state_counts()</code></a> instead.</p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[6]||(s[6]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/calculate-state-counts.jl#L25-L32",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[6]})]),a("details",u,[a("summary",null,[s[8]||(s[8]=a("a",{id:"FMDData._calculate_state_seroprevalence-Tuple{Any, Any}",href:"#FMDData._calculate_state_seroprevalence-Tuple{Any, Any}"},[a("span",{class:"jlbinding"},"FMDData._calculate_state_seroprevalence")],-1)),s[9]||(s[9]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[11]||(s[11]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_calculate_state_seroprevalence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(table, original_df)</span></span></code></pre></div><p>An internal function to handle the calculation of the state/serotype counts based upon the provided state/serotype seroprevalence values and total state counts. Because DataFrames handles tables as named tuples, we can extract information about the columns being passed from the regex selection and then use substitution strings to collect a view of the correct column of total state counts.</p><p>You probably want to use the user-facing function <a href="/dev/icar-cleaning#FMDData.calculate_state_seroprevalence-Union{Tuple{DataFrames.DataFrame}, Tuple{T}, Tuple{DataFrames.DataFrame, T}} where T&lt;:(AbstractVector{&lt;:AbstractString})"><code>calculate_state_seroprevalence()</code></a> instead.</p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[10]||(s[10]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/calculate-state-seroprevalence.jl#L27-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[10]})]),a("details",g,[a("summary",null,[s[12]||(s[12]=a("a",{id:"FMDData._calculate_string_occurences-Union{Tuple{Vector{S}}, Tuple{S}, Tuple{Vector{S}, Vector{S}}} where S<:AbstractString",href:"#FMDData._calculate_string_occurences-Union{Tuple{Vector{S}}, Tuple{S}, Tuple{Vector{S}, Vector{S}}} where S<:AbstractString"},[a("span",{class:"jlbinding"},"FMDData._calculate_string_occurences")],-1)),s[13]||(s[13]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[15]||(s[15]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_calculate_string_occurences</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{S}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unique_vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{S}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unique</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vals)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Internal function to calculate how many times each unique string value occurs in a vector of strings</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[14]||(s[14]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/utils.jl#L93-L100",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[14]})]),a("details",_,[a("summary",null,[s[16]||(s[16]=a("a",{id:'FMDData._calculate_totals!-Union{Tuple{T}, Tuple{OrderedCollections.OrderedDict, Vector{T}, String}} where T<:Union{var"#s74", var"#s73"} where {var"#s74"<:Union{var"#s72", var"#s71"} where {var"#s72"<:Missing, var"#s71"<:Integer}, var"#s73"<:Integer}',href:'#FMDData._calculate_totals!-Union{Tuple{T}, Tuple{OrderedCollections.OrderedDict, Vector{T}, String}} where T<:Union{var"#s74", var"#s73"} where {var"#s74"<:Union{var"#s72", var"#s71"} where {var"#s72"<:Missing, var"#s71"<:Integer}, var"#s73"<:Integer}'},[a("span",{class:"jlbinding"},"FMDData._calculate_totals!")],-1)),s[17]||(s[17]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[19]||(s[19]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_calculate_totals!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    totals_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OrderedDict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    colname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{&lt;:Union{&lt;:Missing, &lt;:Integer}, &lt;:Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Internal function to calculate the serotype total.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[18]||(s[18]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/total-row-functions.jl#L251-L259",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[18]})]),a("details",y,[a("summary",null,[s[20]||(s[20]=a("a",{id:"FMDData._check_all_required_serotypes-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractVector{<:AbstractString}",href:"#FMDData._check_all_required_serotypes-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractVector{<:AbstractString}"},[a("span",{class:"jlbinding"},"FMDData._check_all_required_serotypes")],-1)),s[21]||(s[21]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[23]||(s[23]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_check_all_required_serotypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    all_matched_serotypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowed_serotypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_allowed_serotypes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Internal function to check that all required serotypes provided in the data.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[22]||(s[22]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/serotype-checks.jl#L46-L53",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[22]})]),a("details",E,[a("summary",null,[s[24]||(s[24]=a("a",{id:"FMDData._check_identical_column_names-Tuple{DataFrames.DataFrame}",href:"#FMDData._check_identical_column_names-Tuple{DataFrames.DataFrame}"},[a("span",{class:"jlbinding"},"FMDData._check_identical_column_names")],-1)),s[25]||(s[25]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[27]||(s[27]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_check_identical_column_names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if the provided data has any duplicate column names.</p><p>Should be run BEFORE <a href="/dev/internal#FMDData._check_similar_column_names-Tuple{DataFrames.DataFrame}"><code>_check_similar_column_names()</code></a> as <code>push!()</code> call in <a href="/dev/internal#FMDData._check_similar_column_names-Tuple{DataFrames.DataFrame}"><code>_check_similar_column_names</code></a> will overwrite previous Dict entry key (of similar column names) if there are exact matches.</p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[26]||(s[26]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/column-name-checks.jl#L24-L30",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[26]})]),a("details",b,[a("summary",null,[s[28]||(s[28]=a("a",{id:"FMDData._check_no_disallowed_serotypes-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractVector{<:AbstractString}",href:"#FMDData._check_no_disallowed_serotypes-Union{Tuple{T}, Tuple{T, T}} where T<:AbstractVector{<:AbstractString}"},[a("span",{class:"jlbinding"},"FMDData._check_no_disallowed_serotypes")],-1)),s[29]||(s[29]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[31]||(s[31]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_check_no_disallowed_serotypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    all_matched_serotypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowed_serotypes</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_allowed_serotypes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> AbstractVector{&lt;:AbstractString}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Internal function to check that there are no disallowed serotypes provided in the data.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[30]||(s[30]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/serotype-checks.jl#L64-L71",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[30]})]),a("details",m,[a("summary",null,[s[32]||(s[32]=a("a",{id:"FMDData._check_similar_column_names-Tuple{DataFrames.DataFrame}",href:"#FMDData._check_similar_column_names-Tuple{DataFrames.DataFrame}"},[a("span",{class:"jlbinding"},"FMDData._check_similar_column_names")],-1)),s[33]||(s[33]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[35]||(s[35]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_check_similar_column_names</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if any columns have similar names. Calculates if any column names are substrings of other columns names.</p><p>Should be run AFTER <a href="/dev/internal#FMDData._check_identical_column_names-Tuple{DataFrames.DataFrame}"><code>_check_identical_column_names()</code></a> as <code>push!()</code> call will overwrite previous Dict entry key if there are exact matches.</p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[34]||(s[34]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/column-name-checks.jl#L45-L51",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[34]})]),a("details",F,[a("summary",null,[s[36]||(s[36]=a("a",{id:"FMDData._collect_totals_check_args-Union{Tuple{T}, Tuple{Vector{T}, String, Vararg{Any}}} where T<:Union{Missing, Integer}",href:"#FMDData._collect_totals_check_args-Union{Tuple{T}, Tuple{Vector{T}, String, Vararg{Any}}} where T<:Union{Missing, Integer}"},[a("span",{class:"jlbinding"},"FMDData._collect_totals_check_args")],-1)),s[37]||(s[37]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[39]||(s[39]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_collect_totals_check_args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    col</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    colname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    _</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Union{Union{&lt;:Missing, &lt;:Integer}, &lt;:Integer}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Collect the necessary arguments to provide to the <a href="/dev/internal#FMDData._calculate_totals!-Union{Tuple{T}, Tuple{OrderedCollections.OrderedDict, Vector{T}, String}} where T&lt;:(Union{var&quot;#s74&quot;, var&quot;#s73&quot;} where {var&quot;#s74&quot;&lt;:(Union{var&quot;#s72&quot;, var&quot;#s71&quot;} where {var&quot;#s72&quot;&lt;:Missing, var&quot;#s71&quot;&lt;:Integer}), var&quot;#s73&quot;&lt;:Integer})"><code>_calculate_totals!()</code></a> function for count-based columns. Uses <code>_...</code> varargs to denote that additional arguments (relevant for seroprevalence calculations in other methods of this function) might be passed but are not used in this specific method for integer/count columns.</p><p><strong>Arguments</strong></p><ul><li><p><code>col::Vector{T}</code>: The column vector of counts.</p></li><li><p><code>colname::String</code>: The name of the column.</p></li><li><p><code>_...</code>: Varargs for unused parameters in this method.</p></li></ul><p>Returns a <code>Try.Ok</code> containing a tuple <code>(col, colname)</code> to be unpacked and passed to <code>_calculate_totals!</code>.</p>`,5)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[38]||(s[38]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/total-row-functions.jl#L202-L218",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[38]})]),a("details",f,[a("summary",null,[s[40]||(s[40]=a("a",{id:"FMDData._combine_error_messages-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Try.InternalPrelude.AbstractResult",href:"#FMDData._combine_error_messages-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:Try.InternalPrelude.AbstractResult"},[a("span",{class:"jlbinding"},"FMDData._combine_error_messages")],-1)),s[41]||(s[41]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[43]||(s[43]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_combine_error_messages</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(arr_of_errs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractVector{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; filter_ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Try.InternalPrelude.AbstractResult</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Internal function. Combines error messages from a vector of <code>Try</code> results into a single string.</p><p>This is useful for aggregating multiple errors into a single, more informative error message.</p><p><strong>Arguments</strong></p><ul><li><p><code>arr_of_errs</code>: A vector of <code>Try.Ok</code> or <code>Try.Err</code> objects.</p></li><li><p><code>filter_ok</code>: If <code>true</code>, <code>Try.Ok</code> results are filtered out before combining messages. Defaults to <code>false</code>.</p></li></ul>',5)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[42]||(s[42]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/error-handlers.jl#L40-L50",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[42]})]),a("details",T,[a("summary",null,[s[44]||(s[44]=a("a",{id:"FMDData._correct_serotype_counts!-Tuple{DataFrames.DataFrame}",href:"#FMDData._correct_serotype_counts!-Tuple{DataFrames.DataFrame}"},[a("span",{class:"jlbinding"},"FMDData._correct_serotype_counts!")],-1)),s[45]||(s[45]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[47]||(s[47]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_correct_serotype_counts!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    statename_column </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :states_ut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowed_serotypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> default_allowed_serotypes,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Regex</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Correct any serotype counts that have been miscalculated during the inferral steps, arising from rounding errors in the provided seroprevalence numbers that are then translated into counts to difference between initial and later dataframes. If the pre or post counts for all serotypes are 0, then all serotype specific counts must be 0 as well, so correct.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[46]||(s[46]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-processing/icar-processing-functions.jl#L320-L329",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[46]})]),a("details",D,[a("summary",null,[s[48]||(s[48]=a("a",{id:"FMDData._log_try_error",href:"#FMDData._log_try_error"},[a("span",{class:"jlbinding"},"FMDData._log_try_error")],-1)),s[49]||(s[49]=i()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[51]||(s[51]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_log_try_error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res, type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; unwrap_ok </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Internal function. Checks a <code>Try</code> result. If it&#39;s an <code>Err</code>, it logs the error message and returns the unwrapped error. If it&#39;s an <code>Ok</code>, it returns the unwrapped value by default.</p><p>This function helps manage control flow by logging non-critical errors without halting execution, while still allowing critical errors to be propagated.</p><p><strong>Arguments</strong></p><ul><li><p><code>res</code>: The <code>Try.Ok</code> or <code>Try.Err</code> object to check.</p></li><li><p><code>type::Symbol</code>: The logging level to use if <code>res</code> is an <code>Err</code>. Can be <code>:Error</code>, <code>:Warn</code>, or <code>:Info</code>. Defaults to <code>:Error</code>.</p></li><li><p><code>unwrap_ok::Bool</code>: If <code>true</code>, returns the unwrapped value of an <code>Ok</code> result. If <code>false</code>, returns the <code>Try.Ok</code> object itself. Defaults to <code>true</code>.</p></li></ul>',5)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[50]||(s[50]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/error-handlers.jl#L6-L17",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[50]})]),a("details",C,[a("summary",null,[s[52]||(s[52]=a("a",{id:"FMDData._totals_row_selectors",href:"#FMDData._totals_row_selectors"},[a("span",{class:"jlbinding"},"FMDData._totals_row_selectors")],-1)),s[53]||(s[53]=i()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[55]||(s[55]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_totals_row_selectors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Symbol</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :states_ut</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    totals_key </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;total&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    allowed_serotypes </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vcat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;all&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, default_allowed_serotypes),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Regex</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Internal function to extract the totals row and the subset of dataframe rows that match the regex.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[54]||(s[54]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/total-row-functions.jl#L174-L185",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[54]})]),a("details",v,[a("summary",null,[s[56]||(s[56]=a("a",{id:"FMDData._unwrap_err_or_empty_str-Union{Tuple{Union{Try.Err{<:E}, Try.Ok{<:T}}}, Tuple{E}, Tuple{T}} where {T<:AbstractString, E}",href:"#FMDData._unwrap_err_or_empty_str-Union{Tuple{Union{Try.Err{<:E}, Try.Ok{<:T}}}, Tuple{E}, Tuple{T}} where {T<:AbstractString, E}"},[a("span",{class:"jlbinding"},"FMDData._unwrap_err_or_empty_str")],-1)),s[57]||(s[57]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[59]||(s[59]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">_unwrap_err_or_empty_str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res)</span></span></code></pre></div><p>Internal funciton. Unwraps a <code>Try.Err</code> to get its error message, or returns an empty string for a <code>Try.Ok</code>.</p><p>This function is a helper for <code>_combine_error_messages</code>, ensuring that only error messages are included in the final combined string.</p>',3)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[58]||(s[58]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/error-handlers.jl#L69-L75",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[58]})]),a("details",A,[a("summary",null,[s[60]||(s[60]=a("a",{id:"FMDData.collect_all_present_serotypes",href:"#FMDData.collect_all_present_serotypes"},[a("span",{class:"jlbinding"},"FMDData.collect_all_present_serotypes")],-1)),s[61]||(s[61]=i()),t(e,{type:"info",class:"jlObjectType jlFunction",text:"Function"})]),s[63]||(s[63]=n('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">collect_all_present_serotypes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(df</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DataFrame</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, reg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Return a vector of all column names that contain serotype information specified in the regex.</p>',2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[62]||(s[62]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/serotype-checks.jl#L30-L34",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[62]})]),a("details",j,[a("summary",null,[s[64]||(s[64]=a("a",{id:"FMDData.correct_state_name-Union{Tuple{S}, Tuple{S, Dict}} where S<:AbstractString",href:"#FMDData.correct_state_name-Union{Tuple{S}, Tuple{S, Dict}} where S<:AbstractString"},[a("span",{class:"jlbinding"},"FMDData.correct_state_name")],-1)),s[65]||(s[65]=i()),t(e,{type:"info",class:"jlObjectType jlMethod",text:"Method"})]),s[67]||(s[67]=n(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">correct_state_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    input_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    states_dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Dict</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FMDData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">states_dict</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Check if a state name is correctly spelled, or previously characterized and matched with a correct name. Returns the correct name if possible, or errors.</p>`,2)),t(e,{type:"info",class:"source-link",text:"source"},{default:l(()=>s[66]||(s[66]=[a("a",{href:"https://github.com/arnold-c/FMDData/blob/4d31bf10fea565871ee5b8bed1863c0b6c059ddf/src/icar-cleaning/state-checks.jl#L38-L45",target:"_blank",rel:"noreferrer"},"source",-1)])),_:1,__:[66]})])])}const O=r(d,[["render",M]]);export{P as __pageData,O as default};
